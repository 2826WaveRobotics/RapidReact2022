// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

#include "RobotContainer.h"
#include <frc2/command/ParallelRaceGroup.h>
#include <frc/smartdashboard/SmartDashboard.h>
#include <iostream>

RobotContainer* RobotContainer::m_robotContainer = NULL;

RobotContainer* GetContainer()
{
    std::cout << "GetContainer() About to call GetInstance()" << std::endl;
    return RobotContainer::GetInstance();
}

RobotContainer::RobotContainer() : m_autonomousCommand() {
    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    // -- Commented out until we need it IF we use SmartDashboard
    // frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    // frc::SmartDashboard::PutData("Sequential Command Group 1", new SequentialCommandGroup1());
    // frc::SmartDashboard::PutData("Setpoint Command 1", new SetpointCommand1(2.0, &m_drive));
    // frc::SmartDashboard::PutData("Wait Command 1", new WaitCommand1(units::second_t(3)));
    // frc::SmartDashboard::PutData("Front Punch Command", new FrontPunchCommand(&m_punch));
    // frc::SmartDashboard::PutData("Command 1", new Command1());
    // frc::SmartDashboard::PutData("Punch And Exit Tarmac", new PunchAndExitTarmac(&m_punch, &m_drive));

    ConfigureButtonBindings();

    // add auto options to chooser  
    m_chooser.SetDefaultOption("Do Nothing", new AutonomousCommand());
    // recommended to use AddObject instead of AddOption
    // m_chooser.AddOption("Punch And Exit Tarmac", new PunchAndExitTarmac(&m_punch, &m_drive));
    // m_chooser.AddOption("Front Punch ", new FrontPunchCommand(&m_punch));
    // m_chooser.AddOption("Three Ball Auto", new ThreeBallAuto(&m_punch, &m_drive, &m_intake, &m_transport));
    m_chooser.AddObject("Punch And Exit Tarmac", new PunchAndExitTarmac(&m_punch, &m_drive));
    m_chooser.AddObject("Front Punch", new FrontPunchCommand(&m_punch));
    m_chooser.AddObject("Three Ball Auto", new ThreeBallAuto(&m_punch, &m_drive, &m_intake, &m_transport));
    
    frc::SmartDashboard::PutData("Auto Mode", &m_chooser);
}

RobotContainer* RobotContainer::GetInstance() {
    if (m_robotContainer == NULL) {
        std::cout << "RobotContainerNull: assign new RobotContainer()" << std::endl;
        m_robotContainer = new RobotContainer();
    }
    else
    {
        std::cout << "RobotContainer Not Null" << std::endl;
    }
    return(m_robotContainer);
}

void RobotContainer::ConfigureButtonBindings() {

}

frc::XboxController* RobotContainer::getOperatorJS() {
   return &m_operatorJS;
}

frc::XboxController* RobotContainer::getDriverJS() {
   return &m_driverJS;
}

// The selected command will be run in autonomous
frc2::Command* RobotContainer::GetAutonomousCommand() {
  return m_chooser.GetSelected();
}
