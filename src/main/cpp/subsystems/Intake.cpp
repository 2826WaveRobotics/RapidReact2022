// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem - INTAKE

#include "subsystems/Intake.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include "../include/Reference.h"
#include <iostream>

using namespace rev;
using namespace frc;

/**
 * code for the intake
 * 
 * @author WAVE Robotics 2826
 */
Intake::Intake() {
    SetName("Intake");
    SetSubsystem("Intake");

    m_intakeRoller = new CANSparkMax(INTAKE_ROLLER, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_intakeDeploy = new CANSparkMax(INTAKE_DEPLOY, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_isIntakeDeployed = new DigitalInput(IS_INTAKE_DEPLOYED);
    m_intakeDeployEncoder = new SparkMaxRelativeEncoder(m_intakeDeploy->GetEncoder());
    
    m_deployState = false;
    m_overrideState = false;

    m_intakeDeploy->SetIdleMode(CANSparkMax::IdleMode::kBrake);
}

void Intake::Periodic() {
    // Put code here to be run every loop
}

void Intake::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation
}

void Intake::SetIntakeRoller(double speed)
{
    m_intakeRoller->Set(-speed);
}

// intake deploy + stow speed 
void Intake::SetIntakeDeploy(double speed)
{
     m_intakeDeploy->Set(speed); 
}

bool Intake::GetIntakeDeployed()
{
    // 0 is true
    return !m_isIntakeDeployed->Get();
}

double Intake::GetIntakeRollerCurrent()
{
    return m_intakeRoller->GetOutputCurrent();
}

double Intake::GetIntakeDeployCurrent()
{
    return m_intakeRoller->GetOutputCurrent();
}

double Intake::GetIntakeDeployPosition()
{
    return m_intakeDeployEncoder->GetPosition();
}

// deploy state getters + setters
void Intake::SetDeployState(bool state)
{
    m_deployState = state;
}
bool Intake::GetDeployState()
{
    return m_deployState;
}

// override state getters + setters
void Intake::SetOverrideState(bool state)
{
    m_overrideState = state;
}
bool Intake::GetOverrideState()
{
    return m_overrideState;
}

// triggered position getters + setters
double Intake::GetTriggeredPosition()
{
    return m_triggeredPosition;
}
void Intake::SetTriggeredPosition(double position)
{
    m_triggeredPosition = position;
}