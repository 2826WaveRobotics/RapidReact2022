// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem - TRANSPORT

#include "subsystems/Transport.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include "../include/reference.h"

using namespace rev;

/**
 * code for the transport
 * 
 * @author WAVE Robotics 2826
 */
Transport::Transport(){
    SetName("Transport");
    SetSubsystem("Transport");

    m_transporterBelt = new CANSparkMax(TRANSPORTER_BELT, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_rightIndexer = new CANSparkMax(RIGHT_INDEXER, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_leftIndexer = new CANSparkMax(LEFT_INDEXER, CANSparkMaxLowLevel::MotorType::kBrushless);

    m_transporterBelt->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_rightIndexer->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_leftIndexer->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_leftIndexer->SetInverted(false);
}

void Transport::Periodic() {
    // Put code here to be run every loop
}

void Transport::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation
}

void Transport::SetTransporterBeltSpeed(double speed)
{
    m_transporterBelt->Set(speed);
}

 void Transport::SetIndexerSpeed(double leftSpeed, double rightSpeed)
 {
     m_leftIndexer->Set(leftSpeed);
     m_rightIndexer->Set(-rightSpeed);
 }

// transport current getters
double Transport::GetTransporterBeltCurrent()
{
    return m_transporterBelt->GetOutputCurrent();
}
double Transport::GetRightIndexerCurrent()
{
    return m_rightIndexer->GetOutputCurrent();
}
double Transport::GetLeftIndexerCurrent()
{
    return m_leftIndexer->GetOutputCurrent();
}