// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem - PUNCH

#include "subsystems/Punch.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include "../include/Reference.h"
#include <iostream>

using namespace rev;
using namespace frc;

/**
 * code for the punch
 * 
 * @author WAVE Robotics 2826
 */
Punch::Punch(){
    SetName("Punch");
    SetSubsystem("Punch");

    m_backPuncher = new CANSparkMax(BACK_PUNCHER, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_frontPuncher = new CANSparkMax(FRONT_PUNCHER, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_backCamSensor = new DigitalInput(BACK_CAM_SENSOR);
    m_frontCamSensor = new DigitalInput(FRONT_CAM_SENSOR);

    m_backPuncher->SetIdleMode(CANSparkMax::IdleMode::kBrake);

}

void Punch::Periodic() {
    // Put code here to be run every loop
}

void Punch::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation
}

void Punch::SetBackPuncherSpeed(double speed) 
{
    m_backPuncher->Set(speed);
}

void Punch::SetFrontPuncherSpeed(double speed)
{
    m_frontPuncher->Set(-speed);
}

bool Punch::GetBackCamSensor()
{
    //0 is true
    return !m_backCamSensor->Get();
}

bool Punch::GetFrontCamSensor()
{
    //0 is true
    return !m_frontCamSensor->Get();
}

// puncher current getters
double Punch::GetBackPuncherCurrent()
{
    return m_backPuncher->GetOutputCurrent();
}
double Punch::GetFrontPuncherCurrent()
{
    return m_frontPuncher->GetOutputCurrent();
}


void Punch::runBackPuncher(bool punch)
{
    static int phase = phase_0_notRunning;
    if (punch)
    {
        //The operator is holding the Punch button
        switch(phase)
        {
            case phase_0_notRunning:
                //right when the person press punch. 
                //If the sensor is currently seen go to insensor phase.
                //if sensor is not seen go to exit sensor phase.
                if (GetBackCamSensor())
                {
                phase = phase_1_inSensor;
                } 
                else 
                {
                    phase = phase_2_exitSensor;
                }
                break;
            case phase_1_inSensor:
                if(GetBackCamSensor())
                {
                    //Still in the sensor area, still need to keep rotating the cam.
                    phase = phase_1_inSensor;
                    SetBackPuncherSpeed(0.75);
                }
                else
                {
                    //Left the sensor area, now we need to keep rotating until we see the sensor again
                    phase = phase_2_exitSensor;
                }
                //Do In Sensor stuff
                break;
            case phase_2_exitSensor:
                //Do exit sensor stuff
                if(!GetBackCamSensor())
                {
                    //Haven't seen the sensor yet, keep the motor going
                    phase = phase_2_exitSensor;
                    SetBackPuncherSpeed(0.75);
                }
                else
                {
                    //We saw the sensor, now it's time to stop
                    phase = phase_3_foundSensor;
                }
                break;
            case phase_3_foundSensor:
                // Do found sensor things
                // Now that we found the sensor and stopped the cam, we need to know when 
                // someone lets go of the button.
                // Hang out here until the operator lets go of the button.
                phase = phase_3_foundSensor;
                SetBackPuncherSpeed(0);
                break;
            default:
                phase = phase_0_notRunning;
                break;
        }
    }
    else
    {
        //The operator let go of the punch button, ok to start over
        phase = phase_0_notRunning;
        SetBackPuncherSpeed(0);
    }
} // End RunBackPuncher 


void Punch::runFrontPuncher(bool punch)
{
    static int phase = phase_0_notRunning;
    if (punch)
    {
        //The operator is holding the Punch button
        switch(phase)
        {
            case phase_0_notRunning:
                //right when the person press punch. 
                //If the sensor is currently seen go to insensor phase.
                //if sensor is not seen go to exit sensor phase.
                if (GetFrontCamSensor())
                {
                phase = phase_1_inSensor;
                } 
                else 
                {
                    phase = phase_2_exitSensor;
                }
                break;
            case phase_1_inSensor:
                if(GetFrontCamSensor())
                {
                    //Still in the sensor area, still need to keep rotating the cam.
                    phase = phase_1_inSensor;
                    SetFrontPuncherSpeed(0.75);
                }
                else
                {
                    //Left the sensor area, now we need to keep rotating until we see the sensor again
                    phase = phase_2_exitSensor;
                }
                //Do In Sensor stuff
                break;
            case phase_2_exitSensor:
                //Do exit sensor stuff
                if(!GetFrontCamSensor())
                {
                    //Haven't seen the sensor yet, keep the motor going
                    phase = phase_2_exitSensor;
                    SetFrontPuncherSpeed(0.75);
                }
                else
                {
                    //We saw the sensor, now it's time to stop
                    phase = phase_3_foundSensor;
                }
                break;
            case phase_3_foundSensor:
                // Do found sensor things
                // Now that we found the sensor and stopped the cam, we need to know when 
                // someone lets go of the button.
                // Hang out here until the operator lets go of the button.
                phase = phase_3_foundSensor;
                SetFrontPuncherSpeed(0);
                break;
            default:
                phase = phase_0_notRunning;
                break;
        }
    }
    else
    {
        //The operator let go of the punch button, ok to start over
        phase = phase_0_notRunning;
        SetFrontPuncherSpeed(0);
    }
} // End RunFrontPuncher 
