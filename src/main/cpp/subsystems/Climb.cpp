//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem - CLIMB

#include "subsystems/Climb.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include "../include/Reference.h"
#include <iostream>

using namespace rev;
using namespace frc;

/**
 * code for the climb
 * 
 * @author WAVE Robotics 2826
 */
Climb::Climb()
{
    SetName("Climb");
    SetSubsystem("Climb");

    m_climberRoller = new CANSparkMax(CLIMBER_ROLLER, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_hookDeploy = new CANSparkMax(HOOK_DEPLOY, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_grasshopperDrive = new CANSparkMax(GRASSHOPPER_DRIVE, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_rightGrasshopperDeploy = new CANSparkMax(RIGHT_GRASSHOPPER_DEPLOY, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_leftGrasshopperDeploy = new CANSparkMax(LEFT_GRASSHOPPER_DEPLOY, CANSparkMaxLowLevel::MotorType::kBrushless);
    m_isRightGrasshopperDeployed = new DigitalInput(IS_RIGHT_GRASSHOPPER_DEPLOYED); 
    m_isLeftGrasshopperDeployed = new DigitalInput(IS_LEFT_GRASSHOPPER_DEPLOYED);
    m_leftGrasshopperEncoder = new SparkMaxRelativeEncoder(m_leftGrasshopperDeploy->GetEncoder());
    m_rightGrasshopperEncoder = new SparkMaxRelativeEncoder(m_rightGrasshopperDeploy->GetEncoder());

    m_rightGrasshopperDeploy->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_leftGrasshopperDeploy->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_grasshopperDrive->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_hookDeploy->SetIdleMode(CANSparkMax::IdleMode::kBrake);
    m_climberRoller->SetIdleMode(CANSparkMax::IdleMode::kBrake);

    m_leftGrasshopperDeploy->SetInverted(true);

}

void Climb::Periodic() {
    // Put code here to be run every loop
}

void Climb::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation
}

// State setters and getters
void Climb::SetLeftState(bool state)
{
    m_leftState = state;
}
void Climb::SetRightState(bool state)
{
    m_rightState = state;
}
bool Climb::GetLeftState() 
{
    return m_leftState;
}
bool Climb::GetRightState() 
{
    return m_rightState;
}

// override state setters and getters
bool Climb::GetGrasshopperOverrideState()
{
    return m_grasshopperOverrideState;
}
void Climb::SetGrasshopperOverrideState(bool state)
{
    m_grasshopperOverrideState = state;
}

// SET Position setters and getters
double Climb::GetLeftGrasshopperStow()
{
    return m_leftGrasshopperStow;
}
double Climb::GetRightGrasshopperStow()
{
    return m_rightGrasshopperStow;
}
void Climb::SetLeftGrasshopperStow(double position)
{
    m_leftGrasshopperStow = position;
}
void Climb::SetRightGrasshopperStow(double position)
{
    m_rightGrasshopperStow = position;
}
double Climb::GetLeftGrasshopperPosition() 
{
    return m_leftGrasshopperEncoder->GetPosition();
}
double Climb::GetRightGrasshopperPosition() 
{
    return m_rightGrasshopperEncoder->GetPosition();
}


void Climb::SetClimberRollerSpeed(double speed)
{
    m_climberRoller->Set(speed);
}

void Climb::SetHookDeploySpeed(double speed)
{
    m_hookDeploy->Set(speed);
}

void Climb::SetGrasshopperDriveSpeed(double speed)
{
    m_grasshopperDrive->Set(speed);
}

// Current getters (output in Amps)
double Climb::GetGrasshopperDriveCurrent()
{
    return m_grasshopperDrive->GetOutputCurrent();
}
double Climb::GetClimberRollerCurrent()
{
    return m_climberRoller->GetOutputCurrent();
}
double Climb::GetHookDeployCurrent()
{
    return m_hookDeploy->GetOutputCurrent();
}
double Climb::GetLeftGrasshopperDeployCurrent()
{
    return m_leftGrasshopperDeploy->GetOutputCurrent();
}
double Climb::GetRightGrasshopperDeployCurrent()
{
    return m_rightGrasshopperDeploy->GetOutputCurrent();
}

void Climb::SetGrasshopperDeploySpeed(double leftSpeed, double rightSpeed)
{  
    m_leftGrasshopperDeploy->Set(leftSpeed);
    m_rightGrasshopperDeploy->Set(rightSpeed);
}

// grasshopper deploy sensor getters
// CURRENTLY NO SENSORS
bool Climb::GetRightGrasshopperDeployed()
{
    return m_isRightGrasshopperDeployed->Get();
}
bool Climb::GetLeftGrasshopperDeployed()
{
    return m_isLeftGrasshopperDeployed->Get();
}

