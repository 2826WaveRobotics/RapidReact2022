// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: WaitCommand - DRIVE COMMAND

#include "commands/DriveTurnCommand.h"
#include "commands/WaitCommand1.h"
#include "iostream"

/**
 * source code for drive command
 * 
 * @author WAVE Robotics 2826
 */
DriveTurnCommand::DriveTurnCommand(double rotateInput, float turnAngle, Drive* drive):
    m_rotateInput(rotateInput), m_turnAngle(turnAngle), m_drive(drive)
{
    // Use AddRequirements() here to declare subsystem dependencies
    // eg. AddRequirements(Robot::chassis.get());
    SetName("DriveCommandTurn");
}

// Called just before this Command runs the first time
void DriveTurnCommand::Initialize() {
    m_isTargetAngle = false;
}

// Called repeatedly when this Command is scheduled to run
void DriveTurnCommand::Execute() {
    float angle_correction = ((m_drive->GetAngle() - m_turnAngle) * .1f );
    // std::cout << "Angle" << m_drive->GetAngle() << std::endl;
    // std::cout << "Angle Correction" << angle_correction << std::endl;
    double rotateSpeed = m_rotateInput;
    if (m_drive->GetAngle() < m_turnAngle)
    {
        if (m_drive->GetAngle() < (m_turnAngle - 5.0f))
        {
            rotateSpeed * angle_correction;
        }
        else
        {
            rotateSpeed = rotateSpeed;
        }
    }
    else if (m_drive->GetAngle() >= (m_turnAngle + 5.0f))
    {
        rotateSpeed = -rotateSpeed * angle_correction;
    }
    else 
    {
        // std::cout << "TARGET FOUND!!!!!!!!!!!!!" << std::endl;
        m_isTargetAngle = true;
    }
    
    m_drive->arcadeDrive(0, rotateSpeed);
}

bool DriveTurnCommand::IsFinished() {
    if (m_isTargetAngle)
    {
        return true;
    }
    else 
    {
        return false;
    }
}

// Called once after isFinished returns true
void DriveTurnCommand::End(bool interrupted) {
    m_drive->ZeroAngle();
    m_drive->arcadeDrive(0.0,0.0);

    // also reset drive position
    // won't affect timed drive commands but needed for drive distance
    m_drive->ResetDrivePosition(m_drive->GetDriveEncoderPosition());
}

bool DriveTurnCommand::RunsWhenDisabled() const {
    return false;
}