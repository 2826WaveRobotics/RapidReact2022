// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: SequentialCommandGroup - THREE BALL AUTO COMMAND

#include "commands/ThreeBallAuto.h"
#include "frc2/command/ParallelCommandGroup.h"
#include "commands/FrontPunchCommand.h"
#include "commands/SequentialPunch.h"
#include "commands/TransportCommand.h"
#include "commands/DriveCommand.h"
#include "commands/DeployIntakeCommand.h"
#include <iostream>
#include "commands/WaitCommand1.h"
#include <subsystems/Drive.h>
#include <subsystems/Intake.h>
#include <subsystems/Transport.h>
#include <subsystems/Punch.h>

/**
 * code for three ball auto
 * INITIAL FRAMEOUT - NO TESTING!!
 * 
 * @author WAVE Robotics 2826
 */
ThreeBallAuto::ThreeBallAuto(Punch* punch, Drive* drive, Intake* intake, Transport* transport) {

    SetName("ThreeBallAuto");
    
    // VERY RELIABLE 7 BALL AUTO xD
    std::cout << "ENTER ThreeBallAuto()" << std::endl;
    AddCommands(

        frc2::SequentialCommandGroup
        (
            frc2::ParallelCommandGroup
            (
                DeployIntakeCommand(intake),
                FrontPunchCommand(punch)
            ),
            frc2::ParallelCommandGroup
            (
                TransportCommand(intake, transport),
                frc2::SequentialCommandGroup
                (
                    // arc to ball 2
                    DriveCommand(0.5, 0.2, units::time::second_t(2), drive),

                    // rotate towards ball 3
                    DriveCommand(0, 0.5, units::time::second_t(2), drive),

                    // drive straight to ball 3
                    DriveCommand(0.5, 0, units::time::second_t(2), drive),

                    // rotate towards hub
                    DriveCommand(0, 0.5, units::time::second_t(2), drive),

                    // straight towards hub
                    DriveCommand(0.5, 0, units::time::second_t(2), drive),

                    // sequential punch
                    SequentialPunch(punch)

                )
            )
        )
    );
}

bool ThreeBallAuto::RunsWhenDisabled() const {
    return false;
}